Unified query/expression objects
--------------------------------

An expression represents an “item”. An “item” does not have to be an
Item instance (but it can).

An actual value is obtained by executing/evaluating an expression against a
base item, typically the sequence of all Items in a Corn.


Expressions represent one of:
    A literal value
    A sequence of items
    ??? A variable


`All`:
    Represents the unmodified base item. (It is named so as the base item
    is a sequence of Items in Multicorn.)

On expressions representing sequences:
    Returning a new sequence:
        .filter(item -> boolean)
        .map(item -> new item)
        .sort(item -> sort key)
        ???  .groupby(item -> grouping key)
        [slice]

    .reduce((acc, item -> new acc), initial acc)
        or  .reduce(pre-defined marker such as Sum)
    [index]   (Maybe?)


Examples
--------

Company, Person
person['firstname']
person['lastname']
person['company'] -> company
company['name']
company['staff'] -> [person]


req = All.map({ # r represents a company here
               'name': r.name,
               'head_count': r.staff.count()})
# Nothing is done yet: req is an abstract object tree describing what we want.
# This will hit the data store:
Company.search(req)
  → [{'name': 'Kazeo', 'head_count': 2}]


Alternative:
    req = Company.all.filter().map(...).sort()
    req.execute()
    req.open()
    
    Company.all.execute()
  
  
full_name = r.firstname + ' ' + r.lastname
req = All.map(r + {'staff': r.staff.map(# r represents a person in
                                        # the inner map()
                                        r.firstname + ' ' + r.lastname)})
Company.search(req)
 → [{'name': 'Kazeo', 'staff': ['Anna Boten', 'Pierre Alban']}]


# r is a person, r[-1] a company
req = All.map({'name': r.name,
               'addresses': r.staff.sort(-r.firstname)
                                   .map(r.firstname[0] + '.' +
                                        r.lastname + '@' +
                                        # r is a person but r[-1] is r in
                                        # the outer scope: a company
                                        r[-1].name)})
Company.search(req)
 → [{'name': 'Kazeo', 'addresses': ['P.Alban@Kazeo', 'A.Boten@Kazeo']},
    {}]
    
Person.all.map({'c:' r.company, 'a': r.firstname[0] + '.' + r.lastname + '@' + r.company.name})
          .groupby(r.company)
          .map({'c': r.grouper, 'addresses': r.elements.map(r.a)})

    [{'grouper': {'name': ...}, 'elements': [{'c': {...}, 'a': '...'}]}]

Person.all.groupby(r.company).map({'c': r.grouper, 'addresses':
    r.elements.sort(-r.firstname)
              .map(r.firstname[0] + '.' + r.lastname + '@' + r.company.name)})

Person.all.groupby(r.company).map({'c': r.grouper, 'addresses':
        r.elements.sort(-r.firstname)})
  .map(r + {'addresses': r.addresses.map(r.firstname[0] + '.' + r.lastname + '@' + r.company.name))


Map
    Groupby
        All
            Person
        AttrGetter
            Root
            'company'
    {
        'c': AttrGetter
            Root
            'grouper'
        'addresses': Map
            Sort
                AttrGetter
                    Root
                    'elements'
                Operation
                    -
                    AttrGetter
                        Root
                        'firstname'
            Operation
                ItemGetter
                    AttrGetter
                        Root
                        'firstname'
                    0
                +
                Operation
                    '.'
                    +
                    Operation
                        AttrGetter
                            Root
                            'lastname'
                        +
                        Operation
                            '@'
                            +
                            AttrGetter
                                AttrGetter
                                    Root
                                    'company'
                                'name'
    }

----------------------

Chain
    All
        Person
    [
        GroupBy
            r.company
        Map
            {
                'c': r.grouper
                'addresses': Chain
                    r.elements
                    [
                        Sort
                            -r.firstname
                        Map
                            r.firstname[0] + '.' + r.lastname + '@' 
                            + r.company.name
                    ]
            }
    ]
            

req = All.map({ # r represents a company here
               'name': r.name,
               'head_count': r.staff.filter(r.firstname[0] == 'A').count()})


req = All.map({ # r represents a company here
               'name': r.name,
               'head_count': Reduce(Count, r.staff.filter(r.firstname[0] == 'A'))})



Company.all.map(r + {'every_name': Person.all.filter(r.lastname[0] == r[-1].name[0])})



