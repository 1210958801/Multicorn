Requests
========

Introduction
~~~~~~~~~~~~

Access to Multicorn data works with Request objects. Each request *represents*
a value, but building requests does not do any work. The represented value
is only computed and returned when the request is *executed* with the
`execute()` method. With some care, the same request object can be executed
more than once.

Basic requests
--------------

There are three kinds of basic requests. See the reference for each of them
for details.

* The `multicorn.requests.literal` function takes any Python object and
  returns a request object that represents it, without any.
* Every `Storage` instance has a `all` attribute, a request that represents
  the sequence of all its items. The order of this sequence is generally
  undefined. When executing this request more than once, the results will
  change if items were added, removed or modified between executions.
* `multicorn.requests.CONTEXT` is a special request that can not be used by
  itself, but represents the current element in methods such as `filter` and
  `map`.

TODO: links to relevant reference

Composite requests
------------------

Requests can be transformed and combined with operators and methods.
Assuming that `some_req` and `other_req` are request objects, one can use
methods as in `some_req.map(other_req)` and operators as in
`some_req == other_req` or `some_req.clients[:5]`.
All of these return a new request object that represent a value based on
the values represented by their operands or arguments.

See the reference below to see what operators and methods are available
and their meanings.

TODO: links to relevant reference

Implicit literal requests
-------------------------

Non-request objects are converted into requests when a request is expected.
Eg. `some_req == 4` is equivalent to `some_req == literal(4)`. This process
goes into lists, tuples and dicts and convert their content:
`some_req + [other_req, 4]` is equivalent to
`some_req + [other_req, literal(4)]`.

Sequences and iterables
-----------------------

When this document says that a request represents a sequence, the only
guarantee about the result when that request is executed is that the result
is iterable (ie. can be used in a `for` loop). This iterable may not be a
Python sequence that can be indexed (as in `result[3]`) or iterated more
than once.

Multicorn will actually try to use generators instead of lists where possible
so that the end user can iterate over the results of a large sequence-request
without first having a list of all results built in memory.

It is the end user’s responsibility to build a list (eg.
`results = list(some_req.execute())` if they want to use indexing or iterate
more than once.

Reference
~~~~~~~~~

Basic requests
--------------

Function `multicorn.requests.literal(obj)`
    Return a request that represents literally the given object.

        >>> literal(42).execute()
        42

Function `multicorn.requests.as_request(obj)`
    Convert the given object into a request. Request objects are returned
    unchanged. For lists, tuples and dicts, the values are converted
    recursively and a new list, tuple or dict is returned. Other objects
    are converted to a literal request.

Attribute `all` of `Storage` objects
    A request object that represents the sequence of all items in this
    storage. The result of executing this request will change when items
    are added, removed, or modified in the storage.

The CONTEXT object.
    For brevity, users can give this object a shorter name::

        >>> from multicorn.requests import CONTEXT as c

    This request represent the current *context*. It can not be used by itself
    but only in situations that define a context. For example, in the `filter`
    and `map` methods (see below) the context is the current element of
    filtered or mapped sequence.

        >>> literal([3, 5, 8]).map(c * 2).execute()
        [6, 10, 16]

    In nested contexts (eg. a `map` in a `map`), the CONTEXT object can
    be called with a negative integer as the single argument to access outer
    contexts. The integer tells how many levels of nesting to traverse.

        >>> companies = [{'name': 'c1', 'employees': ['a', 'b']},
        ...              {'name': 'c2', 'employees': ['d']}]
        >>> req = literal(companies).map(c.employees.map(c + '@' + c(-1).name))
        >>> req.execute()
        [['a@c1', 'b@c1'], ['d@c2']]

    In the first map, `c` represents a *company* (a dict). In the inner map
    it represents an *employee* (a string), while `c(-1)` is the outer context
    and represents the company.


Operators
---------

On every binary operator such as `a + b`, if only one of a or b is a request
the other is converted to a request [TODO link to Implicit literal requests].

Arithmetic
..........

The four arithmetic operators can be used on requests that represent numbers:
`a + b`, `a - b`, `a * b`, `a / b`. The arithmetic negation `-a` is also
available. The result is a request that represent that operation.
The division is always a true (non truncating) division whether or not you
have `from __future__ import division`.

The addition `a + b` works not only on numbers but also on strings, sequences
(list-likes) and mappings (dict-likes). Like in Python, adding strings or
sequences does a concatenation. Unlike Python, the addition also works with
mappings and returns a dict with key/value pairs from both operands. If the
same key appears in both operands, the value from the right operand is used.
In other words, `a + b` on mappings is the same as
`c = dict(a); c.update(b); return c`.

Comparisons
...........

Requests can also be compared: `a == b`, `a != b`, `a > b`, `a < b`, `a >= b`,
`a <= b`. These return a request that represents the boolean result of the
comparison.

Boolean logic
.............

One can use boolean logic on requests that represent boolean values:
`a & b`, `a | b` and `~a` are requests the respectively represent
the logical *and*, *or* and *not*. In Python these operators are used for
bit-wise logic but on requests their meaning is changed to boolean logic.

Attribute syntax / Mapping access
.................................

On a request that represent a mapping (dict-like), *attributes* represent
a lookup in that mapping, using the attribute name as a key:

    >>> req = literal({'firstname': 'Anna'})
    >>> req2 = req.firstname
    >>> req2.execute()
    'Anna'

There is no syntax with requests to access non-string keys or string keys
that are not a valid Python identifier.

These attributes can not be assigned to. `req.firstname = 'Alfred'` will raise
an error.

Indexing and slicing
....................

Requests that represent a sequence [TODO link to Sequences and iterables] can
be indexed and sliced like Python lists, returning a request that represent
the designated element or sub-sequence respectively:

    >>> req = literal([3, 5, 8, 13, 21])
    >>> req[1].execute()
    5
    >>> req[-2].execute()
    8
    >>> req[:3].execute()
    [3, 5, 8]
    >>> req[::-1].execute()
    [21, 13, 8, 5, 3]

Negative indexes, slice boundary and slice step are supported, with the same
meaning as with Python lists.

Methods
-------

Request objects have methods like `some_req.filter(...)`. However, one can
still use the attribute syntax to access mappings
[TODO: link to Attribute syntax / Mapping access] with the same names:

    >>> req = literal({'filter': 42})
    >>> req2 = req.filter
    >>> req2.execute()
    42

These attributes only behave as methods when they are called.

Methods on sequences
....................

Every request has a `.execute()` method that will ... execute the request,
compute and return the value it represents. This is when Multicorn will
hit the data storages and actually do its work.

On a `some_req` request that represents a sequence
[TODO link to Sequences and iterables], one can use the following methods:

On a request that represents a sequence of numbers, `some_req.sum()` is a
request that represent the sum of these numbers.
TODO: allow other types for sum? (strings or sequence concatenation, mapping
merging, ...)

`some_req.min()` and `some_req.max()` respectively represent the smallest
and biggest element of the sequence, according to the same ordering as
comparisons [TODO link to Comparisons]. Elements of the sequence must be
comparable to each other.

`some_req.len()` represents the number of elements in the sequence.

`some_req.distinct()` represents the sub-sequence built by keeping only
elements the first occurrence of any element. Elements are considered the same
with the same semantics as `a == b` [TODO link to Comparisons].

`some_req.one()` is the same as `some_req[0]` in that it represents the first
element of the sequence, and raises IndexError when it is executed on an empty
sequence, but it also raise ValueError when executed on a sequence with one
or more element.

`.one()` is useful on a sequence filtered with a predicate that identifies
an element uniquely. There really should not be more than one element.
If there is, it’s an error and you don’t want it to pass silently.

Speaking of filtering, `some_req.filter(predicate)` represents the
sub-sequence of elements for which `predicate` is true. The predicate is
converted to a request [TODO link to Implicit literal requests] which should
represent a boolean. The predicate can contain a CONTEXT request
[TODO link to The CONTEXT object]


TODO:
    map
    sort
    groupby
