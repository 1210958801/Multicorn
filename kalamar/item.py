# -*- coding: utf-8 -*-
# This file is part of Dyko
# Copyright © 2008-2009 Kozea
#
# This library is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Kalamar.  If not, see <http://www.gnu.org/licenses/>.

"""
Base classes to create kalamar items.

Parsers must:
- inherit from Item
- have a ``format`` class attribute as a string,
- extend or override the _parse_data method,
- override the serialize method.

The ``format`` string is used to identify the parser in configuration files
and must be unique.

See BinaryItem for a very simple example.

"""

from werkzeug import MultiDict, cached_property
    
from kalamar import parser, utils
from kalamar.requestparser import reverse_convert_value



class Item(object):
    """Base class for parsers.
    
    Items dictionnary-like: you can use the item['…'] syntax to get and set
    properties. Missing properties default to None.
    
    The _access_point attribute represents where, in kalamar, the item is
    stored. It is an instance of AccessPoint.

    Items are hashable but mutable, use hash with caution.

    """
    # TODO: use the MultiDict power by coding getlist/setlist (or not?)
    format = None

    def __init__(self, access_point, opener=None, storage_properties={}, lazy_properties=[]):
        """This constructor should not be used directly.
        Get items from AccessPoint’s or use Item.create_item to create them.
        
        Parameters:
        - access_point: an instance of the AccessPoint class.
        - opener: a function taking no parameters and returning the item raw
          “content” as a bytestring, or the empty string.
        - storage_properties: properties generated by the storage for this
          item.
        
        """
        self._opener = opener or str
        self._raw_content_mimetype = None
        self._access_point = access_point
        self._access_point_name = None
        self._modified = False
        self._request = None
        self.property_names = access_point.property_names
        self.loaded_properties = dict([(name,value) for name,value in storage_properties.items() if name not in lazy_properties])
        self.properties = (dict([(name,None) for name in lazy_properties if name not in self.loaded_properties]))
        self.properties.update(storage_properties)
    
    def is_loaded(self, prop):
        return prop in self.loaded_properties
    
    def __getitem__(self, key):
        """Return the item ``key`` property."""
        try:
            if self.is_loaded(key):
                return self.loaded_properties[key]
            else:
                loaded_prop = self._access_point.load(key, self, [self.properties[key]]) 
                self.loaded_properties[key] = loaded_prop
                return loaded_prop
        except KeyError:
            return None
    
    def __setitem__(self, key, value):
        """Set the item ``key`` property to ``value``."""
        self.loaded_properties[key] = value
        self._modified = True

    def __eq__(self, item):
        """Test if ``item`` is the same as this item."""
        if isinstance(item, Item):
            return hash(item) == hash(self)
        return NotImplemented

    def __cmp__(self, item):
        """Compare two items.
        
        Useful in some algorithms (sorting by key, for example).
        DO NOT USE UNLESS YOU KNOW WHAT YOU'RE DOING!
        
        """
        if isinstance(item, Item):
            str1 = hash(self)
            str2 = hash(item)
            return cmp(str1, str2)
        return NotImplemented

    def __repr__(self):
        """Return a user-friendly representation of item."""
        values = (self.__class__.__name__,
                  repr(self.request),
                  repr(self.access_point_name))
        return '<%s(%s @ %s)>' % values
    
    def __hash__(self):
        """Return a hash of item.
        
        Do not forget that items are mutable, so the hash could change!
        
        This hash value is useful in some algorithms (eg in sets) and it
        permits a huge gain of performance. However, DON'T USE THIS HASH UNLESS
        YOU KNOW WHAT YOU'RE DOING.
        
        """
        return hash(self.access_point_name + self.request)

    @staticmethod
    def create_item(access_point, properties=None, initial_content=None):
        """Return a new item instance.
        
        Parameters:
        - ``access_point``: instance of the access point where the item
          will be reachable (after saving).
        - ``properties``: dictionnary or MultiDict of the item properties.
          These properties must be coherent with what is defined for the
          access point.
        - ``initial_content``: some initial content for parsers needing it.
        
        Fixture
        >>> from _test.corks import CorkAccessPoint
        >>> ap = CorkAccessPoint()
        >>> properties = {}
        
        Test
        >>> item = Item.create_item(ap, properties)
        >>> assert item.format == ap.parser_name
        >>> assert isinstance(item, Item)
        
        """
        storage_properties = dict((name, None) for name
                                  in access_point.get_storage_properties())
        lazy_properties = [name for name in storage_properties if name not in properties]
        item = Item(access_point,storage_properties=storage_properties,lazy_properties=lazy_properties)
        
        # old_storage_properties is meaningless for a new item.
        item.old_storage_properties = MultiDict()
        if properties:
            for name, value in properties.items():
                item[name] = value
        return item

    @property
    def encoding(self):
        """Return the item encoding.

        Return the item encoding, based on what the parser can know from
        the item data or, if unable to do so, on what is specified in the
        access_point.

        """
        return self._access_point.default_encoding
    
    @property
    def modified(self):
        """Return if the item has been modified since creation.

        The item is considered changed if any storage or parser property has
        been changed since its creation.

        """
        return self._modified
    
    @property
    def filename(self):
        """Return the file path.

        If the item is stored in a file, return its path/name.
        Else return None.

        """
        if hasattr(self._access_point, 'filename_for'):
            return self._access_point.filename_for(self)
    
    @property
    def request(self):
        """Return a request sufficient to find this item and only this one.

        This ``request`` must be canonical. As a consequence, opening an item
        twice should give the same ``request``, even if the request used for
        opening the items are not the same.

        This property is used for testing item equality.

        """
        if self._request is None:
            conditions = [
                u'%s=%s' % (key, reverse_convert_value(self[key]))
                for key in self._access_point.primary_keys]
            self._request = '/'.join(conditions)
        return self._request
    
    @property
    def access_point_name(self):
        """Return a request sufficient to find this item and only this one."""
        if self._access_point_name is None:
            self._access_point_name = self._access_point.name
        return self._access_point_name

    def keys(self):
        """Return the name of all properties."""
        # Use a set to make keys unique
        return self.properties.keys()

    def _parse_data(self):
        """Parse properties from data, return a dictionnary (MultiDict).
        
        This method should use ``self._get_content()`` parse the result,
        and return a MultiDict.

        """
        return MultiDict()

    def serialize(self):
        """Return raw content as bytestring."""
        return ''

    def test_condition(self, condition):
        """Return True if item properties matches this condition."""
        return condition.operator(
            self[condition.property_name], condition.value)

    def _get_content(self):
        """Return the raw content as a bytestring, to be parsed."""
        return self[self._access_point.content_attr]

    def _get_parent(self):
        return self[self._access_point.parent_attr]
    
    def _get_children(self):
        return self[self._access_point.children_attr]




class BinaryItem(Item):
    """Simple parser giving access to raw content as ``data`` property."""
    format = 'binary'
    
    def _parse_data(self):
        """Parse the whole item content."""
        return MultiDict({'data': self._get_content()})
        
    def serialize(self):
        """Return the item content."""
        return self.raw_parser_properties['data']

